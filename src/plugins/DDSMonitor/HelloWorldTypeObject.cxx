// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file HelloWorldTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "HelloWorld.h"
#include "HelloWorldTypeObject.h"
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerHelloWorldTypes()
{
    TypeObjectFactory *factory = TypeObjectFactory::get_instance();


    factory->add_type_object("tg_msgs::dds::HelloWorld", tg_msgs::dds::GetHelloWorldIdentifier(true),
            tg_msgs::dds::GetHelloWorldObject(true));
    factory->add_type_object("tg_msgs::dds::HelloWorld", tg_msgs::dds::GetHelloWorldIdentifier(false),
            tg_msgs::dds::GetHelloWorldObject(false));



}

namespace tg_msgs {
    namespace dds {


        const TypeIdentifier* GetHelloWorldIdentifier(bool complete)
        {
            const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("HelloWorld", complete);
            if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
            {
                return c_identifier;
            }

            GetHelloWorldObject(complete); // Generated inside
            return TypeObjectFactory::get_instance()->get_type_identifier("HelloWorld", complete);
        }

        const TypeObject* GetHelloWorldObject(bool complete)
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("HelloWorld", complete);
            if (c_type_object != nullptr)
            {
                return c_type_object;
            }
            else if (complete)
            {
                return GetCompleteHelloWorldObject();
            }
            //else
            return GetMinimalHelloWorldObject();
        }

        const TypeObject* GetMinimalHelloWorldObject()
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("HelloWorld", false);
            if (c_type_object != nullptr)
            {
                return c_type_object;
            }

            TypeObject *type_object = new TypeObject();
            type_object->_d(EK_MINIMAL);
            type_object->minimal()._d(TK_STRUCTURE);

            type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
            type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
            type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
            type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
            type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

            MemberId memberId = 0;
            MinimalStructMember mst_steadyTimeNs;
            mst_steadyTimeNs.common().member_id(memberId++);
            mst_steadyTimeNs.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_steadyTimeNs.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_steadyTimeNs.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_steadyTimeNs.common().member_flags().IS_OPTIONAL(false);
            mst_steadyTimeNs.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_steadyTimeNs.common().member_flags().IS_KEY(false);
            mst_steadyTimeNs.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            {
                std::string cppType = "uint64_t";
                if (cppType == "long double")
                {
                    cppType = "longdouble";
                }
                mst_steadyTimeNs.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
            }

            MD5 steadyTimeNs_hash("steadyTimeNs");
            for(int i = 0; i < 4; ++i)
            {
                mst_steadyTimeNs.detail().name_hash()[i] = steadyTimeNs_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_steadyTimeNs);

            MinimalStructMember mst_index;
            mst_index.common().member_id(memberId++);
            mst_index.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_index.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_index.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_index.common().member_flags().IS_OPTIONAL(false);
            mst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_index.common().member_flags().IS_KEY(false);
            mst_index.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            {
                std::string cppType = "int32_t";
                if (cppType == "long double")
                {
                    cppType = "longdouble";
                }
                mst_index.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
            }

            MD5 index_hash("index");
            for(int i = 0; i < 4; ++i)
            {
                mst_index.detail().name_hash()[i] = index_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_index);

            MinimalStructMember mst_testmsg;
            mst_testmsg.common().member_id(memberId++);
            mst_testmsg.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            mst_testmsg.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            mst_testmsg.common().member_flags().IS_EXTERNAL(false); // Unsupported
            mst_testmsg.common().member_flags().IS_OPTIONAL(false);
            mst_testmsg.common().member_flags().IS_MUST_UNDERSTAND(false);
            mst_testmsg.common().member_flags().IS_KEY(false);
            mst_testmsg.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            mst_testmsg.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("char", {102400}, false));


            MD5 testmsg_hash("testmsg");
            for(int i = 0; i < 4; ++i)
            {
                mst_testmsg.detail().name_hash()[i] = testmsg_hash.digest[i];
            }
            type_object->minimal().struct_type().member_seq().emplace_back(mst_testmsg);


            // Header
            // TODO Inheritance
            //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
            //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

            TypeIdentifier identifier;
            identifier._d(EK_MINIMAL);

            SerializedPayload_t payload(static_cast<uint32_t>(
                MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
            eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
            // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
            eprosima::fastcdr::Cdr ser(
                fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
            payload.encapsulation = CDR_LE;

            type_object->serialize(ser);
            payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
            MD5 objectHash;
            objectHash.update((char*)payload.data, payload.length);
            objectHash.finalize();
            for(int i = 0; i < 14; ++i)
            {
                identifier.equivalence_hash()[i] = objectHash.digest[i];
            }

            TypeObjectFactory::get_instance()->add_type_object("HelloWorld", &identifier, type_object);
            delete type_object;
            return TypeObjectFactory::get_instance()->get_type_object("HelloWorld", false);
        }

        const TypeObject* GetCompleteHelloWorldObject()
        {
            const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("HelloWorld", true);
            if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
            {
                return c_type_object;
            }

            TypeObject *type_object = new TypeObject();
            type_object->_d(EK_COMPLETE);
            type_object->complete()._d(TK_STRUCTURE);

            type_object->complete().struct_type().struct_flags().IS_FINAL(false);
            type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
            type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
            type_object->complete().struct_type().struct_flags().IS_NESTED(false);
            type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

            MemberId memberId = 0;
            CompleteStructMember cst_steadyTimeNs;
            cst_steadyTimeNs.common().member_id(memberId++);
            cst_steadyTimeNs.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_steadyTimeNs.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_steadyTimeNs.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_steadyTimeNs.common().member_flags().IS_OPTIONAL(false);
            cst_steadyTimeNs.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_steadyTimeNs.common().member_flags().IS_KEY(false);
            cst_steadyTimeNs.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            {
                std::string cppType = "uint64_t";
                if (cppType == "long double")
                {
                    cppType = "longdouble";
                }
                cst_steadyTimeNs.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
            }

            cst_steadyTimeNs.detail().name("steadyTimeNs");

            type_object->complete().struct_type().member_seq().emplace_back(cst_steadyTimeNs);

            CompleteStructMember cst_index;
            cst_index.common().member_id(memberId++);
            cst_index.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_index.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_index.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_index.common().member_flags().IS_OPTIONAL(false);
            cst_index.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_index.common().member_flags().IS_KEY(false);
            cst_index.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            {
                std::string cppType = "int32_t";
                if (cppType == "long double")
                {
                    cppType = "longdouble";
                }
                cst_index.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier(cppType, false));
            }

            cst_index.detail().name("index");

            type_object->complete().struct_type().member_seq().emplace_back(cst_index);

            CompleteStructMember cst_testmsg;
            cst_testmsg.common().member_id(memberId++);
            cst_testmsg.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
            cst_testmsg.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
            cst_testmsg.common().member_flags().IS_EXTERNAL(false); // Unsupported
            cst_testmsg.common().member_flags().IS_OPTIONAL(false);
            cst_testmsg.common().member_flags().IS_MUST_UNDERSTAND(false);
            cst_testmsg.common().member_flags().IS_KEY(false);
            cst_testmsg.common().member_flags().IS_DEFAULT(false); // Doesn't apply
            cst_testmsg.common().member_type_id(*TypeObjectFactory::get_instance()->get_array_identifier("char", {102400}, true));


            cst_testmsg.detail().name("testmsg");

            type_object->complete().struct_type().member_seq().emplace_back(cst_testmsg);


            // Header
            type_object->complete().struct_type().header().detail().type_name("HelloWorld");
            // TODO inheritance


            TypeIdentifier identifier;
            identifier._d(EK_COMPLETE);

            SerializedPayload_t payload(static_cast<uint32_t>(
                CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
            eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
            // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
            eprosima::fastcdr::Cdr ser(
                fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
                eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
            payload.encapsulation = CDR_LE;

            type_object->serialize(ser);
            payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
            MD5 objectHash;
            objectHash.update((char*)payload.data, payload.length);
            objectHash.finalize();
            for(int i = 0; i < 14; ++i)
            {
                identifier.equivalence_hash()[i] = objectHash.digest[i];
            }

            TypeObjectFactory::get_instance()->add_type_object("HelloWorld", &identifier, type_object);
            delete type_object;
            return TypeObjectFactory::get_instance()->get_type_object("HelloWorld", true);
        }

    } // namespace dds
} // namespace tg_msgs